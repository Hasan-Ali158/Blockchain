import tkinter as tk
from tkinter import simpledialog, messagebox
import os

class TaskManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Task Management App")
        self.root.configure(bg="#f2f2f2")

        self.tasks = []
        self.load_tasks()

        self.label = tk.Label(root, text="----WELCOME TO THE TASK MANAGEMENT APP----", font=("Helvetica", 16), bg="#f2f2f2", fg="#333333")
        self.label.pack(pady=10)

        self.task_listbox = tk.Listbox(root, selectmode=tk.SINGLE, width=50, height=10, bg="#ffffff", fg="#333333")
        self.task_listbox.pack(pady=10)
        self.update_listbox()

        self.button_frame = tk.Frame(root, bg="#f2f2f2")
        self.button_frame.pack(pady=5)

        self.add_task_button = tk.Button(self.button_frame, text="Add Task", command=self.add_task, bg="#4CAF50", fg="#ffffff", width=15)
        self.add_task_button.grid(row=0, column=0, padx=5, pady=5)

        self.update_task_button = tk.Button(self.button_frame, text="Update Task", command=self.update_task, bg="#2196F3", fg="#ffffff", width=15)
        self.update_task_button.grid(row=0, column=1, padx=5, pady=5)

        self.delete_task_button = tk.Button(self.button_frame, text="Delete Task", command=self.delete_task, bg="#f44336", fg="#ffffff", width=15)
        self.delete_task_button.grid(row=0, column=2, padx=5, pady=5)

        self.view_tasks_button = tk.Button(self.button_frame, text="View Tasks", command=self.view_tasks, bg="#FFC107", fg="#333333", width=15)
        self.view_tasks_button.grid(row=1, column=0, padx=5, pady=5, columnspan=3)

        self.exit_button = tk.Button(root, text="Exit", command=self.save_and_exit, bg="#9E9E9E", fg="#ffffff", width=15)
        self.exit_button.pack(pady=5)

    def add_task(self):
        task_name = simpledialog.askstring("Input", "Enter task:")
        if task_name:
            self.tasks.append(task_name)
            self.update_listbox()
            messagebox.showinfo("Success", f"Task '{task_name}' has been successfully added.")

    def update_task(self):
        try:
            selected_index = self.task_listbox.curselection()[0]
            current_task = self.tasks[selected_index]
            new_task_name = simpledialog.askstring("Input", f"Update task '{current_task}' to:")
            if new_task_name:
                self.tasks[selected_index] = new_task_name
                self.update_listbox()
                messagebox.showinfo("Success", f"Updated task '{current_task}' to '{new_task_name}'.")
        except IndexError:
            messagebox.showerror("Error", "No task selected. Please select a task to update.")

    def delete_task(self):
        try:
            selected_index = self.task_listbox.curselection()[0]
            task_to_delete = self.tasks[selected_index]
            confirm = messagebox.askyesno("Confirm Delete", f"Are you sure you want to delete the task '{task_to_delete}'?")
            if confirm:
                del self.tasks[selected_index]
                self.update_listbox()
                messagebox.showinfo("Success", f"Task '{task_to_delete}' has been deleted.")
        except IndexError:
            messagebox.showerror("Error", "No task selected. Please select a task to delete.")

    def view_tasks(self):
        if self.tasks:
            tasks_str = "\n".join(self.tasks)
            messagebox.showinfo("Tasks", f"Total tasks:\n{tasks_str}")
        else:
            messagebox.showinfo("Tasks", "No tasks available.")

    def update_listbox(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.tasks:
            self.task_listbox.insert(tk.END, task)

    def save_and_exit(self):
        self.save_tasks()
        self.root.quit()

    def load_tasks(self):
        if os.path.exists("tasks.txt"):
            with open("tasks.txt", "r") as file:
                self.tasks = file.read().splitlines()

    def save_tasks(self):
        with open("tasks.txt", "w") as file:
            for task in self.tasks:
                file.write(task + "\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = TaskManager(root)
    root.mainloop()
